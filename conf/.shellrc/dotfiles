# vim:ft=sh :

# Install all
function dotfiles-install-all() {
	# Check internet connection to github
	if [[ $(curl -sL -w "%{http_code}\n" "http://www.google.com/" -o /dev/null) -eq 200 ]]; then
		if command -v git >/dev/null; then
			# Install homebrew at OS X
			if [[ $(uname) == "Darwin" ]]; then
				if [[ -d $HOME/.homebrew ]]; then
					cd $HOME && mv -f $HOME/.homebrew $HOME/.homebrew.previous
				fi
				# Clone homebrew from git repo
				git clone https://github.com/Homebrew/homebrew.git $HOME/.homebrew
				$HOME/.homebrew/bin/brew update && $HOME/.homebrew/bin/brew upgrade && $HOME/.homebrew/bin/brew cask upgrade &&
					$HOME/.homebrew/bin/brew cleanup
			fi

			# Install homebrew at Linux
			if [[ $(uname) == "Linux" ]]; then
				# Install on Debian and Ubuntu
				# sudo apt-get install build-essential curl git m4 ruby texinfo libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev zlib1g-dev
				if [[ -d $HOME/.homebrew ]]; then
					cd $HOME && mv -f $HOME/.homebrew $HOME/.homebrew.previous
				fi
				# Clone homebrew from git repo
				git clone https://github.com/Homebrew/linuxbrew.git $HOME/.homebrew
				$HOME/.homebrew/bin/brew update && $HOME/.homebrew/bin/brew upgrade && $HOME/.homebrew/bin/brew cask upgrade &&
					$HOME/.homebrew/bin/brew cleanup
			fi

			# Install oh-my-zsh and modules
			if [[ -d $HOME/.oh-my-zsh ]]; then
				cd $HOME && mv -f $HOME/.oh-my-zsh $HOME/.oh-my-zsh.previous
			fi
			git clone https://github.com/robbyrussell/oh-my-zsh.git $HOME/.oh-my-zsh

			# Install TMUX Plugin Manager
			if [[ -d $HOME/.tmux ]]; then
				cd $HOME && mv -f $HOME/.tmux $HOME/.tmux.previous
			fi
			mkdir -p $HOME/.tmux/plugins && git clone https://github.com/tmux-plugins/tpm $HOME/.tmux/plugins/tpm
		else
			echo "Stop execution. Please install git"
		fi
	fi
}

# Update All
function dotfiles-update-all() {
	# Check internet connection to github
	if [[ $(curl -sL -w "%{http_code}\n" "http://www.google.com/" -o /dev/null) -eq 200 ]]; then
		# Update dotFiles
		pushd $DOTFILES && git pull && git pull --recurse-submodules && popd && source $DOTFILES/conf/.zshrc

		# Update brew
		if [[ $(uname) == "Darwin" ]]; then
			if command -v brew >/dev/null; then
				$HOMEBREW/bin/brew update &&
					$HOMEBREW/bin/brew upgrade &&
					$HOMEBREW/bin/brew cask upgrade &&
					$HOMEBREW/bin/brew cleanup
			fi
		fi
		if [[ $(uname) == "Linux" ]]; then
			if command -v brew >/dev/null; then
				$HOMEBREW/bin/brew update &&
					$HOMEBREW/bin/brew upgrade &&
					$HOMEBREW/bin/brew cask upgrade &&
					$HOMEBREW/bin/brew cleanup
			fi
		fi

		# Update oh-my-zsh and modules
		if [[ -d $ZSH ]]; then
			pushd $ZSH && git pull && pushd $ZSH && git pull --recurse-submodules && popd && popd
		fi

		# Update TMUX Plugin Manager
		if [[ -d $HOME/.tmux/plugins ]]; then
			for file in $HOME/.tmux/plugins/*; do
				if [[ -d $file ]]; then
					pushd $file
					if [[ -d '.git' ]]; then
						git pull
					fi
					popd
				fi
			done
		fi

		# Update Vim Plugins
		if [[ -d $HOME/.vim/bundle ]]; then
			for file in $HOME/.vim/bundle/*; do
				if [[ -d $file ]]; then
					pushd $file
					if [[ -d '.git' ]]; then
						git pull
					fi
					popd
				fi
			done
		fi

		# Update NVim Plugins
		if command -v nvim >/dev/null; then
			nvim +PlugUpdate +qall
			nvim +UpdateRemotePlugins +qall
		fi

		# Update gcloud components
		if command -v gcloud >/dev/null; then
			yes Y | gcloud components update
		fi

		# Update Pip packages
		if command -v pip2 >/dev/null; then
			pip2 freeze --local | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip2 install -U
		fi
		if command -v pip3 >/dev/null; then
			pip3 freeze --local | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip3 install -U
		fi

		# Update gcloud components
		if command -v gcloud >/dev/null; then
			yes Y | gcloud components update
		fi

	else
		echo "Offline. No connection to github"
	fi
}

# Create aliases
function dotfiles-aliases-all() {
	# Create aliases
	if [[ -d $DOTFILES ]]; then
		for file in $DOTFILES/conf/.*; do
			f=$(echo $file | awk -F"/" '{print $NF}')
			if [[ $f != . ]] && [[ $f != .. ]]; then
				mv -f $HOME/$f $HOME/$f.previous
				ln -sf $file $HOME
			fi
		done
	else
		echo "404: $DOTFILES folder not found"
	fi
}
